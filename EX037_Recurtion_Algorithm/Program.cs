//
//string[,] table = new string[2,5]; //задаём новый двумерный массив - таблица строк
// String.Empty  //инициализация происходит такой константой
//Так выглядит вышеуказанный массив из 2 строк и 5 столбцов
//table[0,0]  table[0,1] table[0,2] table[0,3] table[0,4]
//table[1,0]  table[1,1] table[1,2] table[1,3] table[1,4]
/*table[1,2] = "слово"; // Обращаемся к нужному элементу 1 строка, 2 столбик

for (int rows=0; rows < 2; rows++) //распечатываем массив
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine($"-{table[rows,columns]}-");
    }
}*/

//определим двумерный массив из чисел - марицу
/*int[,] matrix = new int[3,4];

for (int i = 0; i < matrix.GetLength(0); i++) //распечатываем массив
{
    for (int j = 0; j < matrix.GetLength(1); j++)
    {
        Console.Write($"{matrix[i,j]} ");
    }
Console.WriteLine(); //переход на новую строку для красивого отображения
}*/


// опишем метод, как печатать массив 
/*
void PrintArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++) //распечатываем массив
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine(); //переход на новую строку для красивого отображения
    }
}

//опишем метод для заполнения массива
void FillArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++) //распечатываем массив
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i,j]= new Random().Next(1,10);   
                  }
    }
}


int[,] matrix = new int[3,4];  //выделяем память, инициализация массива

PrintArray(matrix); // вызываем метод

FillArray(matrix);
Console.WriteLine();
PrintArray(matrix); */


//как закрасить черно-белую картинку

/*
int[,] pic = new int[,]  //если у нас уже дан массив, не нужно указывать кол-во строк и столбцов
{
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage(int[,] image)
{
    for (int i = 0; i < image.GetLength(0); i++) //выводим в консоль массив - картинку
    {
        for (int j = 0; j < image.GetLength(1); j++)
        {
            //Console.Write($"{matr[i, j]} ");
            if (image[i,j]==0) Console.Write($" ");
            else Console.Write($"+");
        }
        Console.WriteLine(); 
    }
}

void FillImage(int row, int col) //напишем метод для закрашивания картинки
{
    if(pic[row,col]==0)
    {
        pic[row,col] = 1;
        FillImage(row-1,col);  //метод вызывает сам себя
        FillImage(row,col-1);
        FillImage(row+1,col);
        FillImage(row,col+1);
    }
}


PrintImage(pic);
FillImage(13,13);
PrintImage(pic);
*/

// пример рекурсии - нахождение факториала
/*double Factorial(int n)
{
    // 1! = 1
    // 0! = 1
    if(n==1) return 1;
    else return n * Factorial(n-1);
}
//Console.WriteLine(Factorial(5)); // 3! = 3*2*1 = 6
// для небольших чисел работает
// сделаем цикл для больших чисел
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}");
}
//проблема: в результате видим отрицательное число:
// 17! = -288522240  - это связано с переполнением типа int
// решение: для возвращаемого числа изменить тип данных с
// int Factorial(int n) на double Factorial(int n) 
// получившийся метод и тип данных позволяет хранить такие числа.
*/
// числа Фиббоначи
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

double Fibonacci(int n)
{
    if (n==0 || n==1) return 1;
    else return Fibonacci(n-1) + Fibonacci(n-2);
}

for (int i = 1; i < 50; i++)
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}

//после 40 чисел начинается торможение, медленный вывод результата

